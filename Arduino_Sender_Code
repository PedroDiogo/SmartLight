/**
* 
*
*/
#include <SPI.h>
#include <mrf24j.h>

const int pin_reset = 6;
const int pin_cs = 10; // default CS pin on ATmega8/168/328
const int pin_interrupt = 2; // default interrupt pin on ATmega8/168/328

Mrf24j mrf(pin_reset, pin_cs, pin_interrupt);
int incoming;
void setup() {
  Serial.begin(115200);
  
  mrf.reset();
  mrf.init();
  
  mrf.set_pan(0xcafe);
  // This is _our_ address
  mrf.address16_write(0x6001); 

  // uncomment if you want to receive any packet on this channel
  //mrf.set_promiscuous(true);
  
  // uncomment if you want to enable PA/LNA external control
  //mrf.set_palna(true);
  
  // uncomment if you want to buffer all PHY Payload
  //mrf.set_bufferPHY(true);

  attachInterrupt(0, interrupt_routine, CHANGE); // interrupt 0 equivalent to pin 2(INT0) on ATmega8/168/328
  interrupts();
}

void interrupt_routine() {
    mrf.interrupt_handler(); // mrf24 object interrupt routine
}

void loop() {
    mrf.check_flags(&handle_rx, &handle_tx);
    if (Serial.available() > 0) {
        incoming = Serial.read();
        switch(incoming){
          case 0xA5:
            mrf.send16(0x6002, "ON");
            break;
          case 0x5A:
            mrf.send16(0x6002, "OF");
          case 0x99:
            asm volatile ("  jmp 0");
            break;
          default:
            Serial.println("UNKNOWN");
            break;
        }
    }
}

void handle_rx() {
}

void handle_tx() {
    if (mrf.get_txinfo()->tx_ok) {
        Serial.println("OK");
    } else {
        Serial.print("FAIL: ");Serial.println(mrf.get_txinfo()->retries);
    }
}
